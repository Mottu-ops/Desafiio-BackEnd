// <auto-generated />
using System;
using MT.Backend.Challenge.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace MT.Backend.Challenge.Infrastructure.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20241023080953_InitialMT.Backend.Challenge.Migrations")]
    partial class InitialMTBackendChallengeMigrations
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("MT.Backend.Challenge.Domain.Entities.DeliveryDriver", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<bool>("Active")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Document")
                        .IsRequired()
                        .HasMaxLength(14)
                        .HasColumnType("character varying(14)");

                    b.Property<int>("DriversLicenseCategory")
                        .HasColumnType("integer");

                    b.Property<string>("DriversLicenseImageUrl")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("character varying(300)");

                    b.Property<string>("DriversLicenseNumber")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.Property<DateTime?>("DriversLicenseValidDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("character varying(120)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("Document")
                        .IsUnique();

                    b.HasIndex("DriversLicenseNumber")
                        .IsUnique();

                    b.HasIndex("Id")
                        .IsUnique();

                    b.ToTable("DeliveryDrivers");
                });

            modelBuilder.Entity("MT.Backend.Challenge.Domain.Entities.Motorcycle", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<bool>("Active")
                        .HasColumnType("boolean");

                    b.Property<string>("Brand")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Color")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LicensePlate")
                        .IsRequired()
                        .HasMaxLength(7)
                        .HasColumnType("character varying(7)");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Year")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.HasIndex("LicensePlate")
                        .IsUnique();

                    b.ToTable("Motorcycles");
                });

            modelBuilder.Entity("MT.Backend.Challenge.Domain.Entities.Rental", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<bool>("Active")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DeliveryDriverId")
                        .IsRequired()
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("EstimatedEndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("MotorcycleId")
                        .IsRequired()
                        .HasColumnType("character varying(50)");

                    b.Property<string>("RentalCategoryId")
                        .IsRequired()
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("DeliveryDriverId");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.HasIndex("MotorcycleId");

                    b.HasIndex("RentalCategoryId");

                    b.ToTable("Rentals");
                });

            modelBuilder.Entity("MT.Backend.Challenge.Domain.Entities.RentalCategory", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<bool>("Active")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<decimal>("PercentualFine")
                        .HasColumnType("numeric");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric");

                    b.Property<int>("RentalCategoryDays")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("RentalCategoryDays")
                        .IsUnique();

                    b.ToTable("RentalCategories");

                    b.HasData(
                        new
                        {
                            Id = "433a46c6-4da7-4d93-912a-d8ce496c8977",
                            Active = true,
                            CreatedAt = new DateTime(2024, 10, 23, 8, 9, 50, 271, DateTimeKind.Utc).AddTicks(1083),
                            Name = "7 dias",
                            PercentualFine = 0.2m,
                            Price = 30m,
                            RentalCategoryDays = 7,
                            UpdatedAt = new DateTime(2024, 10, 23, 8, 9, 50, 271, DateTimeKind.Utc).AddTicks(1087)
                        },
                        new
                        {
                            Id = "b81b0a3a-f90e-4e77-afe1-b214b6ac137d",
                            Active = true,
                            CreatedAt = new DateTime(2024, 10, 23, 8, 9, 50, 271, DateTimeKind.Utc).AddTicks(1166),
                            Name = "15 dias",
                            PercentualFine = 0.4m,
                            Price = 28m,
                            RentalCategoryDays = 15,
                            UpdatedAt = new DateTime(2024, 10, 23, 8, 9, 50, 271, DateTimeKind.Utc).AddTicks(1166)
                        },
                        new
                        {
                            Id = "2a281a76-84f5-4664-a8fb-2cf3629caa8d",
                            Active = true,
                            CreatedAt = new DateTime(2024, 10, 23, 8, 9, 50, 271, DateTimeKind.Utc).AddTicks(1173),
                            Name = "30 dias",
                            PercentualFine = 0m,
                            Price = 22m,
                            RentalCategoryDays = 30,
                            UpdatedAt = new DateTime(2024, 10, 23, 8, 9, 50, 271, DateTimeKind.Utc).AddTicks(1173)
                        },
                        new
                        {
                            Id = "2a11f7df-1f7f-4de7-a510-c895b69d3bad",
                            Active = true,
                            CreatedAt = new DateTime(2024, 10, 23, 8, 9, 50, 271, DateTimeKind.Utc).AddTicks(1179),
                            Name = "45 dias",
                            PercentualFine = 0m,
                            Price = 20m,
                            RentalCategoryDays = 45,
                            UpdatedAt = new DateTime(2024, 10, 23, 8, 9, 50, 271, DateTimeKind.Utc).AddTicks(1180)
                        },
                        new
                        {
                            Id = "19346023-b90b-4d0a-b254-58fae6ff0018",
                            Active = true,
                            CreatedAt = new DateTime(2024, 10, 23, 8, 9, 50, 271, DateTimeKind.Utc).AddTicks(1185),
                            Name = "50 dias",
                            PercentualFine = 0m,
                            Price = 18m,
                            RentalCategoryDays = 50,
                            UpdatedAt = new DateTime(2024, 10, 23, 8, 9, 50, 271, DateTimeKind.Utc).AddTicks(1185)
                        });
                });

            modelBuilder.Entity("MT.Backend.Challenge.Domain.Entities.Rental", b =>
                {
                    b.HasOne("MT.Backend.Challenge.Domain.Entities.DeliveryDriver", "DeliveryDriver")
                        .WithMany()
                        .HasForeignKey("DeliveryDriverId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MT.Backend.Challenge.Domain.Entities.Motorcycle", "Motorcycle")
                        .WithMany()
                        .HasForeignKey("MotorcycleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MT.Backend.Challenge.Domain.Entities.RentalCategory", "RentalCategory")
                        .WithMany()
                        .HasForeignKey("RentalCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DeliveryDriver");

                    b.Navigation("Motorcycle");

                    b.Navigation("RentalCategory");
                });
#pragma warning restore 612, 618
        }
    }
}
